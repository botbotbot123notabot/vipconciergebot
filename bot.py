import logging
import os
from telegram import Update, Sticker
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CommandHandler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = "bot.log"
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STICKER_EMOJI = "ü´•"  # –≠–º–æ–¥–∑–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Å—Ç–∏–∫–µ—Ä—É
RECORD_FILE = "record.txt"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Ä–∏–∏ –∏ —Ä–µ–∫–æ—Ä–¥–∞
current_streak = 0
record = 0

def get_record():
    """–ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(RECORD_FILE):
        logger.debug(f"–§–∞–π–ª —Ä–µ–∫–æ—Ä–¥–∞ {RECORD_FILE} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∫–æ—Ä–¥ –≤ 0.")
        return 0
    try:
        with open(RECORD_FILE, "r", encoding='utf-8') as file:
            value = int(file.read())
            logger.debug(f"–¢–µ–∫—É—â–∏–π –º–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω: {value}")
            return value
    except (ValueError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–∫–æ—Ä–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        return 0

def update_record(new_record):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞ –≤ —Ñ–∞–π–ª–µ."""
    try:
        with open(RECORD_FILE, "w", encoding='utf-8') as file:
            file.write(str(new_record))
        logger.info(f"–ú–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_record}")
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∫–æ—Ä–¥–∞ –≤ —Ñ–∞–π–ª: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_streak, record

    message = update.effective_message
    user = message.from_user.username or message.from_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user}: {message.text or '–°—Ç–∏–∫–µ—Ä'}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–º
    if message.sticker:
        sticker: Sticker = message.sticker
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∏–∫–µ—Ä —Å —ç–º–æ–¥–∑–∏: {sticker.emoji}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–º–æ–¥–∑–∏ —Å—Ç–∏–∫–µ—Ä–∞ –Ω—É–∂–Ω–æ–º—É
        if STICKER_EMOJI in sticker.emoji:
            current_streak += 1
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Å–µ—Ä–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤. –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {current_streak}")

            if current_streak > record:
                record = current_streak
                update_record(record)
                logger.info(f"–ù–æ–≤—ã–π –º–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {record}")
        else:
            logger.debug("–°—Ç–∏–∫–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤–æ–º—É —ç–º–æ–¥–∑–∏. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é.")
            if current_streak > 0:
                await announce_streak(update, current_streak, record)
                current_streak = 0
    else:
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∏–∫–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é.")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—Ç–∏–∫–µ—Ä, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if current_streak > 0:
            await announce_streak(update, current_streak, record)
            current_streak = 0

async def announce_streak(update: Update, streak: int, record: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Ä–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤."""
    logger.info(f"–°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {streak}. –†–µ–∫–æ—Ä–¥: {record}.")
    try:
        await update.message.reply_text(
            f"–°–µ—Ä–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n–í—Å–µ–≥–æ –±—ã–ª–æ {streak}.\n–¢–µ–∫—É—â–∏–π –º–∏—Ä–æ–≤–æ–π —Ä–µ–∫–æ—Ä–¥ {record}."
        )
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–µ—Ä–∏–∏: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫."""
    logger.error(msg="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –≥–æ—Ç–æ–≤ —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã.")

def main():
    global current_streak, record
    current_streak = 0
    record = get_record()

    # –í—Å—Ç–∞–≤–∫–∞ –≤–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    BOT_TOKEN = '7794929885:AAHDiG47EN6wA250uWkvi0J1_JTWgCw-23g'

    try:
        application = ApplicationBuilder().token(BOT_TOKEN).build()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞: {e}")
        return

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))
    logger.debug("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–æ–±–∞–≤–ª–µ–Ω.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.ALL, handle_message))
    logger.debug("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    logger.debug("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω.")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        application.run_polling()
    except Exception as e:
        logger.critical(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
